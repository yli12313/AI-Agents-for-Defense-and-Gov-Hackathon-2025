"""
Vulnerability Analysis module for Shodan results
"""
import json
from typing import Dict, List, Any, Tuple

# CVE severity database (simplified)
# In a real implementation, this would likely connect to the NIST NVD database
CVE_DATABASE = {
    "CVE-2018-10933": {
        "description": "Authentication bypass vulnerability in libssh server code",
        "severity": 9.8,
        "vector": "NETWORK",
        "attack_complexity": "LOW",
        "impact": "Complete system compromise"
    },
    "CVE-2019-12185": {
        "description": "Multiple buffer overflow vulnerabilities in SCADA products",
        "severity": 8.6,
        "vector": "NETWORK",
        "attack_complexity": "LOW",
        "impact": "Remote code execution"
    },
    "CVE-2020-14882": {
        "description": "Vulnerability in Oracle WebLogic Server",
        "severity": 9.8,
        "vector": "NETWORK",
        "attack_complexity": "LOW",
        "impact": "Remote code execution without authentication"
    }
}

# Risk score factors and weights
RISK_FACTORS = {
    "open_ports": 0.1,  # More open ports = higher risk
    "vulnerabilities": 0.4,  # Known vulnerabilities = high risk
    "ics_related": 0.3,  # ICS/SCADA systems = higher risk
    "services": 0.2,  # Certain services (SSH, HTTP, etc.) = risk
}

# Service risk ratings
SERVICE_RISK = {
    "ssh": 0.5,
    "http": 0.6,
    "http-proxy": 0.7,
    "telnet": 0.9,
    "ftp": 0.7,
    "dns": 0.3,
    "snmp": 0.8,
    "smtp": 0.5,
    "modbus": 0.9,
    "bacnet": 0.9,
    "ics": 0.95
}

def analyze_vulnerabilities(host_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Analyze the vulnerabilities in Shodan host data
    
    Args:
        host_data: Shodan host data
        
    Returns:
        Dict with analysis results
    """
    results = {
        "ip": host_data.get("ip_str", "Unknown"),
        "location": f"{host_data.get('city', 'Unknown')}, {host_data.get('country_name', 'Unknown')}",
        "risk_score": 0,
        "vulnerabilities": [],
        "open_services": [],
        "is_ics_related": False,
        "risk_factors": {}
    }
    
    # Check if this is ICS/SCADA related
    tags = host_data.get("tags", [])
    results["is_ics_related"] = any(tag in ["ics", "scada", "plc", "modbus", "bacnet"] for tag in tags)
    
    # Analyze open ports and services
    ports = host_data.get("ports", [])
    results["open_ports_count"] = len(ports)
    
    # Get service information
    data = host_data.get("data", [])
    service_risk_score = 0
    
    for service_data in data:
        port = service_data.get("port")
        service = service_data.get("service", "unknown")
        product = service_data.get("product", "unknown")
        version = service_data.get("version", "unknown")
        
        service_info = {
            "port": port,
            "service": service,
            "product": product,
            "version": version,
            "risk": SERVICE_RISK.get(service, 0.1)
        }
        
        results["open_services"].append(service_info)
        service_risk_score += service_info["risk"]
    
    # Normalize service risk score
    if results["open_services"]:
        service_risk_score /= len(results["open_services"])
    
    # Analyze vulnerabilities
    vulns = host_data.get("vulns", [])
    vulnerability_risk = 0
    
    for cve_id in vulns:
        cve_info = CVE_DATABASE.get(cve_id, {
            "description": "Unknown vulnerability",
            "severity": 5.0,
            "vector": "UNKNOWN",
            "attack_complexity": "UNKNOWN",
            "impact": "Unknown"
        })
        
        results["vulnerabilities"].append({
            "id": cve_id,
            "description": cve_info["description"],
            "severity": cve_info["severity"],
            "impact": cve_info["impact"]
        })
        
        vulnerability_risk += cve_info["severity"] / 10.0
    
    # Normalize vulnerability risk
    if vulns:
        vulnerability_risk /= len(vulns)
    
    # Calculate port risk (more open ports = higher risk)
    port_risk = min(1.0, results["open_ports_count"] / 10.0)
    
    # Calculate overall risk score
    risk_factors = {
        "open_ports": port_risk,
        "services": service_risk_score,
        "vulnerabilities": vulnerability_risk,
        "ics_related": 1.0 if results["is_ics_related"] else 0.0
    }
    
    results["risk_factors"] = risk_factors
    
    # Calculate weighted risk score
    weighted_score = sum(
        factor_score * RISK_FACTORS[factor_name]
        for factor_name, factor_score in risk_factors.items()
    )
    
    # Scale to 0-10
    results["risk_score"] = round(weighted_score * 10, 1)
    
    # Add risk level
    if results["risk_score"] >= 7.5:
        results["risk_level"] = "HIGH"
    elif results["risk_score"] >= 5:
        results["risk_level"] = "MEDIUM"
    else:
        results["risk_level"] = "LOW"
    
    return results

def get_mitigation_recommendations(analysis_results: Dict[str, Any]) -> List[str]:
    """
    Generate mitigation recommendations based on analysis results
    
    Args:
        analysis_results: Results from analyze_vulnerabilities
        
    Returns:
        List of recommendation strings
    """
    recommendations = []
    
    # Check for high risk level
    if analysis_results["risk_level"] == "HIGH":
        recommendations.append("URGENT: This system requires immediate security attention.")
    
    # Vulnerability-specific recommendations
    for vuln in analysis_results["vulnerabilities"]:
        if vuln["severity"] >= 9.0:
            recommendations.append(f"CRITICAL: Patch {vuln['id']} immediately ({vuln['description']}).")
        elif vuln["severity"] >= 7.0:
            recommendations.append(f"HIGH: Prioritize patching {vuln['id']} ({vuln['description']}).")
        else:
            recommendations.append(f"MEDIUM: Address {vuln['id']} in the next update cycle ({vuln['description']}).")
    
    # Service-specific recommendations
    for service in analysis_results["open_services"]:
        if service["risk"] >= 0.8:
            recommendations.append(f"HIGH RISK SERVICE: Restrict access to {service['service']} on port {service['port']}.")
        elif service["risk"] >= 0.6:
            recommendations.append(f"MEDIUM RISK SERVICE: Review {service['service']} on port {service['port']} for security configuration.")
    
    # ICS specific recommendations
    if analysis_results["is_ics_related"]:
        recommendations.append("ICS SYSTEM DETECTED: Ensure this system is completely isolated from the public internet.")
        recommendations.append("Implement ICS-specific security controls according to NIST SP 800-82.")
    
    # General recommendations based on open ports
    if analysis_results["open_ports_count"] > 5:
        recommendations.append(f"EXCESSIVE PORTS: Consider reducing the {analysis_results['open_ports_count']} open ports to minimize attack surface.")
    
    return recommendations 